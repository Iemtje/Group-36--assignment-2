import unittest
import sys
import os

sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from username_validation import validate_username_length, validate_username_characters, check_username_exists
from password_generation import generate_secure_password, validate_password_requirements, generate_random_chars, build_charset
from database import load_existing_users, add_user_to_database


class TestCoverageImprovement(unittest.TestCase):

    def test_validate_username_length_TooShort_ReturnsFalse(self):
        short_username = "ab"
        result = validate_username_length(short_username)
        self.assertFalse(result)

        empty_username = ""
        result_empty = validate_username_length(empty_username)
        self.assertFalse(result_empty)

    def test_validate_username_characters_InvalidChars_ReturnsFalse(self):
        invalid_username = "user@name"
        result = validate_username_characters(invalid_username)
        self.assertFalse(result)

        username_with_space = "user name"
        result_space = validate_username_characters(username_with_space)
        self.assertFalse(result_space)

        username_with_punct = "user.name!"
        result_punct = validate_username_characters(username_with_punct)
        self.assertFalse(result_punct)

    def test_validate_password_requirements_MissingUppercase_ReturnsFalse(self):
        password_no_upper = "password123!"
        result = validate_password_requirements(password_no_upper)
        self.assertFalse(result)

        password_no_lower = "PASSWORD123!"
        result_no_lower = validate_password_requirements(password_no_lower)
        self.assertFalse(result_no_lower)

    def test_generate_random_chars_EmptyCharset_ReturnsEmptyList(self):
        charset = "abc123"
        result_zero = generate_random_chars(charset, 0)
        self.assertEqual(result_zero, [])
        self.assertEqual(len(result_zero), 0)

        result_one = generate_random_chars(charset, 1)
        self.assertEqual(len(result_one), 1)
        self.assertIn(result_one[0], charset)

    def test_add_user_to_database_ValidInput_UpdatesDatabase(self):
        initial_db = load_existing_users()
        initial_count = len(initial_db)

        new_username = "newuser123"
        new_password = "SecurePass123!"
        updated_db = add_user_to_database(new_username, new_password, initial_db)

        self.assertEqual(len(updated_db), initial_count + 1)
        self.assertIn(new_username, updated_db)
        self.assertIs(updated_db, initial_db)

    def test_check_username_exists_NonExistentUser_ReturnsFalse(self):
        user_database = load_existing_users()

        non_existent = "thisuserdoesnotexist999"
        result = check_username_exists(non_existent, user_database)
        self.assertFalse(result)

        empty_user = ""
        result_empty = check_username_exists(empty_user, user_database)
        self.assertFalse(result_empty)

        partial_match = "admi"
        result_partial = check_username_exists(partial_match, user_database)
        self.assertFalse(result_partial)


if __name__ == '__main__':
    unittest.main()
